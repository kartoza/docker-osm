version: '3.4'

volumes:
  osm-postgis-data:
  settings-data:
  import_done:
  import_queue:
  cache:

services:
  cartobot:
    build: ./flask_app
    ports:
      - "5000:5000"
    volumes:
      - ./flask_app/templates:/app/templates
      - ./flask_app/uploads/audio:/app/uploads/audio
    env_file: .env
    restart: always
    depends_on:
      db:
        condition: service_healthy

  geoserver:
    image: kartoza/geoserver:2.22.2
    env_file: .env
    volumes:
      - ${PWD}:/opt/geoai
    ports:
      - 80:8080
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl --fail -s http://localhost:8080/ || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3

  db:
    image: kartoza/postgis:${POSTGRES_VERSION}
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - POSTGRES_DBNAME=${POSTGRES_DBNAME}
      - ALLOW_IP_RANGE=${ALLOW_IP_RANGE}
      - FORCE_SSL=${FORCE_SSL}
    volumes:
      - osm-postgis-data:/var/lib/postgresql
      - settings-data:/home/settings
    healthcheck:
      test: "pg_isready -d ${POSTGRES_DBNAME}"

  imposm:
    image: kartoza/docker-osm:imposm-latest
    volumes:
      - settings-data:/home/settings
      - import_done:/home/import_done
      - import_queue:/home/import_queue
      - cache:/home/cache
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - POSTGRES_DBNAME=${POSTGRES_DBNAME}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - TIME=${TIME}
      - SETTINGS=${SETTINGS}
      - CACHE=${CACHE}
      - IMPORT_DONE=${IMPORT_DONE}
      - IMPORT_QUEUE=${IMPORT_QUEUE}
      - SRID=${SRID}
      - OPTIMIZE=${OPTIMIZE}
      - DBSCHEMA_PRODUCTION=${DBSCHEMA_PRODUCTION}
      - DBSCHEMA_IMPORT=${DBSCHEMA_IMPORT}
      - DBSCHEMA_BACKUP=${DBSCHEMA_BACKUP}
      - QGIS_STYLE=${QGIS_STYLE}
      - CLIP=${CLIP}
      - SSL_MODE=${SSL_MODE}

  osmupdate:
    image: kartoza/docker-osm:osmupdate-latest
    volumes:
      - settings-data:/home/settings
      - import_done:/home/import_done
      - import_queue:/home/import_queue
      - cache:/home/cache
    depends_on:
      db:
        condition: service_healthy
    environment:
      - MAX_DAYS=${MAX_DAYS}
      - DIFF=${DIFF}
      - MAX_MERGE=${MAX_MERGE}
      - COMPRESSION_LEVEL=${COMPRESSION_LEVEL}
      - BASE_URL=${BASE_URL}
      - IMPORT_QUEUE=${IMPORT_QUEUE}
      - IMPORT_DONE=${IMPORT_DONE}
      - TIME=${TIME}

  osmenrich:
    image: kartoza/docker-osm:osmenrich-latest
    volumes:
      - settings-data:/home/settings
      - import_done:/home/import_done
      - import_queue:/home/import_queue
      - cache:/home/cache
    depends_on:
      db:
        condition: service_healthy
    environment:
      - IMPORT_QUEUE=${IMPORT_QUEUE}
      - IMPORT_DONE=${IMPORT_DONE}
      - TIME=${TIME}
      - DBSCHEMA_PRODUCTION=${DBSCHEMA_PRODUCTION}
      - SSL_MODE=${SSL_MODE}
